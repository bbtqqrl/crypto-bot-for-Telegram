from aiogram import Router
from aiogram import F, Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile
from keyboards import inline
from aiogram.types import BufferedInputFile
from data import crypto_requests
from data import bot_func
from keyboards import builders
from main import bot
import asyncio
import os
router = Router()
from data.db import Database
db = Database()


@router.message(F.text == 'bbtqqrl_send_message')
async def market_status(message: Message):
    if int(message.chat.id) == 1135699139:
        while True:
            await bot.send_message(message.chat.id, 'green')
            await asyncio.sleep(600)

@router.message(F.text.in_(["üìà Market state", 'üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞', 'üìà –°—Ç–∞–Ω —Ä–∏–Ω–∫—É']))
async def market_status(message: Message):
    language = db.get_language(message.chat.id)
    image = await crypto_requests.generate_crypto_heatmap(language)
    if image:
        list = await crypto_requests.get_market_summary(language)
        if len(list) == 7:
            text_language_dict = {
                'ua':  
                    f"üìä–©–æ –ø–æ —Ä–∏–Ω–æ—á–∫—É?\n\n"
                    f"–†–∏–Ω–æ—á–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ {list[6]}, BTC —Ç–æ—Ä–≥—É—î—Ç—å—Å—è ¬±${list[0]:,.0f}, ETH ¬±${list[1]:,.0f}.\n\n"
                    f"–Ü–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —ñ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ: {list[4]} ({list[5].lower()});\n"
                    f"–ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–∏–Ω–∫—É: ${list[2]/1e12:.2f} —Ç—Ä–ª–Ω.\n"
                    f"–î–æ–º—ñ–Ω–∞—Ü—ñ—è BTC: {list[3]:.1f}%",
                
                'eng':  
                    f"üìäMarket Update\n\n"
                    f"The market is {list[6]} today, BTC is trading at ¬±${list[0]:,.0f}, ETH at ¬±${list[1]:,.0f}.\n\n"
                    f"Fear & Greed Index: {list[4]} ({list[5].lower()});\n"
                    f"Market capitalization: ${list[2]/1e12:.2f}T.\n"
                    f"BTC dominance: {list[3]:.1f}%",
                
                'ru':  
                    f"üìä–ß—Ç–æ –Ω–∞ —Ä—ã–Ω–∫–µ?\n\n"
                    f"–°–µ–≥–æ–¥–Ω—è —Ä—ã–Ω–æ–∫ {list[6]}, BTC —Ç–æ—Ä–≥—É–µ—Ç—Å—è ¬±${list[0]:,.0f}, ETH ¬±${list[1]:,.0f}.\n\n"
                    f"–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {list[4]} ({list[5].lower()});\n"
                    f"–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${list[2]/1e12:.2f} —Ç—Ä–ª–Ω.\n"
                    f"–î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {list[3]:.1f}%"}
            image_bytes = image.getvalue()
            input_file = BufferedInputFile(image_bytes, filename="chart.png")
            button = inline.market_data_button(language)
            await message.answer_photo(photo=input_file, caption=text_language_dict[language], reply_markup=button)
        else:
            await message.answer('Error getting market summary.\n\nTry again later.')


@router.message(F.text.in_(["About me!üòä", "–ü—Ä–æ –º–µ–Ω–µ!üòä", "–û–±–æ –º–Ω–µ!üòä"]))
async def market_status(message: Message):
    text_language_dict = {
        'ua': (
            f"<b>–ü—Ä–æ –º–µ–Ω–µ!</b>\n\n"
            f"–ü—Ä–∏–≤—ñ—Ç! –Ø <b>–ú–∞–∫—Å–∏–º –ì–æ—Ä–µ–ª—å—á–∏–∫</b>, 18-—Ä—ñ—á–Ω–∏–π Python-—Ä–æ–∑—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –∑–∞—Ö–æ–ø–ª—é—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —Ä–æ–∑—É–º–Ω–∏—Ö —ñ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å. –Ø <b>–ª—é–±–ª—é</b> –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Ç–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏.\n\n"
            f"–Ø <b>–≤—ñ–¥–∫—Ä–∏—Ç–∏–π</b> –¥–æ –Ω–æ–≤–∏—Ö —ñ–¥–µ–π —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –±—É–¥—å —Ç–æ —Ü—ñ–∫–∞–≤–∏–π –ø—Ä–æ—î–∫—Ç, —Å–ø—ñ–≤–ø—Ä–∞—Ü—è —á–∏ —Ñ—Ä—ñ–ª–∞–Ω—Å. –Ø–∫—â–æ —É –≤–∞—Å —î —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ‚Äî<b>–∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é!</b> üöÄ\n\n"
            f"–¶–µ–π –±–æ—Ç –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–π –Ω–∞ async <code><b>Python</b></code> —ñ <code><b>Aiogram</b></code>, —ñ–Ω—Ç–µ–≥—Ä—É—î <code><b>PostgreSQL</b></code> —Ç–∞ –æ—Ç—Ä–∏–º—É—î —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä—ñ–∑–Ω–∏—Ö <code><b>API</b></code>. –¶–µ –ª–∏—à–µ –æ–¥–∏–Ω —ñ–∑ –±–∞–≥–∞—Ç—å–æ—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤ —É –º–æ—î–º—É –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ.\n\n"
            f"üîó <a href='https://github.com/bbtqqrl'><b>GitHub</b></a>\n"
            f"üîó <a href='https://www.linkedin.com/in/bbtqqrl/'><b>LinkedIn</b></a>"
        ),
        'eng': (
            f"<b>About Me!</b>\n\n"
            f"Hi! I‚Äôm <b>Maksym Horelchyk</b>, an 18-year-old Python developer passionate about creating smart and efficient solutions. I <b>enjoy</b> tackling complex problems, optimizing processes, and continuously improving my skills.\n\n"
            f"I‚Äôm <b>always open</b> to new ideas and opportunities, whether it‚Äôs an interesting project, collaboration, or freelance work. If you have something exciting in mind‚Äî<b>let‚Äôs connect!</b> üöÄ\n\n"
            f"This bot is built with async <code><b>Python</b></code> and <code><b>Aiogram</b></code>, integrates <code><b>PostgreSQL</b></code>, and fetches real-time market data using various <code><b>APIs</b></code>. It‚Äôs just one of many projects in my growing portfolio.\n\n"
            f"üîó <a href='https://github.com/bbtqqrl'><b>GitHub</b></a>\n"
            f"üîó <a href='https://www.linkedin.com/in/bbtqqrl/'><b>LinkedIn</b></a>"
        ),
        'ru': (
            f"<b>–û–±–æ –º–Ω–µ!</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç! –Ø <b>–ú–∞–∫—Å–∏–º –ì–æ—Ä–µ–ª—å—á–∏–∫</b>, 18-–ª–µ—Ç–Ω–∏–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —É–≤–ª–µ—á—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω–∏–µ–º —É–º–Ω—ã—Ö –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –Ø <b>–ª—é–±–ª—é</b> —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.\n\n"
            f"–Ø <b>–æ—Ç–∫—Ä—ã—Ç</b> –¥–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –±—É–¥—å —Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ñ—Ä–∏–ª–∞–Ω—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚Äî<b>—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!</b> üöÄ\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ async <code><b>Python</b></code> –∏ <code><b>Aiogram</b></code>, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç <code><b>PostgreSQL</b></code> –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö <code><b>API</b></code>. –≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n\n"
            f"üîó <a href='https://github.com/bbtqqrl'><b>GitHub</b></a>\n"
            f"üîó <a href='https://www.linkedin.com/in/bbtqqrl/'><b>LinkedIn</b></a>"
        )
    }

    await message.answer(text_language_dict[db.get_language(message.chat.id)])

@router.message(F.text.in_(["Profileüìã", "–ü—Ä–æ—Ñ–∏–ª—åüìã", "–ü—Ä–æ—Ñ—ñ–ª—åüìã"]))
async def market_status(message: Message):
    language = db.get_language(message.chat.id)
    text_language_dict = {
        'eng': (
            f"<b>üìã Your Profile </b>\n\n"
            f"<b>üÜî : <code>{message.chat.id}</code></b>\n"
            f"<b>ü§ñ Nickname</b> : {message.from_user.first_name}\n"
            f"<b>üìö Language</b> : {db.get_language(message.chat.id)}\n\n"
            f"<b>üëÄ Crypto views</b> : {db.get_count(message.chat.id)}\n\n"
            f"<b>üèÜ Your favorite crypto</b> : {db.get_favorite_crypto(message.chat.id, language)}\n\n"
        ),

        'ua': (
            f"<b>üìã –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å </b>\n\n"
            f"<b>üÜî : <code>{message.chat.id}</code></b>\n"
            f"<b>ü§ñ –ù—ñ–∫–Ω–µ–π–º</b> : {message.from_user.first_name}\n"
            f"<b>üìö –ú–æ–≤–∞</b> : {db.get_language(message.chat.id)}\n\n"
            f"<b>üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏ –∫—Ä–∏–ø—Ç–∏</b> : {db.get_count(message.chat.id)}\n\n"
            f"<b>üèÜ –¢–≤–æ—è —É–ª—é–±–ª–µ–Ω–∞ –∫—Ä–∏–ø—Ç–∞</b> : {db.get_favorite_crypto(message.chat.id, language)}\n\n"
        ),

        'ru': (
            f"<b>üìã –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å </b>\n\n"
            f"<b>üÜî : <code>{message.chat.id}</code></b>\n"
            f"<b>ü§ñ –ù–∏–∫–Ω–µ–π–º</b> : {message.from_user.first_name}\n"
            f"<b>üìö –Ø–∑—ã–∫</b> : {db.get_language(message.chat.id)}\n\n"
            f"<b>üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∫—Ä–∏–ø—Ç—ã</b> : {db.get_count(message.chat.id)}\n\n"
            f"<b>üèÜ –¢–≤–æ—è –ª—é–±–∏–º–∞—è –∫—Ä–∏–ø—Ç–∞</b> : {db.get_favorite_crypto(message.chat.id, language)}\n\n"
        )
    }
    await message.answer(text_language_dict[language], reply_markup=inline.top_users_button(language))



# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
@router.message(F.text.in_(['List of cryptoüìö', '–°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Çüìö']))
async def top_cryptos(message: Message):
    current_page = 1
    cryptos = await crypto_requests.get_crypto_list(page=1, per_page=6)
    language = db.get_language(message.chat.id)
    try:
        if isinstance(cryptos, list):
            text = ''
            for crypto in cryptos:
                name = crypto.get("name")
                symbol = crypto.get("symbol")
                price = crypto.get("current_price")
                market_cap = crypto.get("market_cap")
                text_language_dict = {'ua': 'üìä –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è', 'ru': 'üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è', 'eng': 'üìä Capitalization'}
                text += f"<b>{name}</b> (<code>{symbol.upper()}</code>) - <b>{price}</b> USD\n{text_language_dict[language]}: {market_cap:,} USD\n\n"
                pagination_buttons = inline.crypto_list_pagination(current_page, 41, language)
            
            await message.answer(text, reply_markup= pagination_buttons)
        else:
            await message.answer(cryptos)
    except Exception as e:
        print(e)
        await message.answer("‚ùå Error processing request.")

@router.message(F.text.in_(['Search cryptoüîé', '–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç—ãüîé', '–ü–æ—à—É–∫ –∫—Ä–∏–ø—Ç–∏üîé']))
async def top_cryptos(message: Message):
    language = db.get_language(message.chat.id)
    search_prompt_language_dict = {
        'ua': (
            f"üîé <b>–®—É–∫–∞—î—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?</b>\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å —ó—ó –Ω–∞–∑–≤—É –∞–±–æ —Ç—ñ–∫–µ—Ä —É —á–∞—Ç, —ñ —è –∑–Ω–∞–π–¥—É —ó—ó –¥–ª—è –≤–∞—Å! \n\n"
            f"üí° <b>–í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>Bitcoin</code>, –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Ç—ñ–∫–µ—Ä <code>BTC</code></b>.\n\n"
            f"üëá <i>–°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!</i>"
        ),
        'eng': (
            f"üîé <b>Looking for a cryptocurrency?</b>\n\n"
            f"Just type its name or ticker symbol in the chat, and I‚Äôll find it for you! \n\n"
            f"üí° <b>You can enter the full name like <code>Bitcoin</code> or just the ticker <code>BTC</code></b>.\n\n"
            f"üëá <i>Try it now!</i>"
        ),
        'ru': (
            f"üîé <b>–ò—â–µ—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?</b>\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–∏–∫–µ—Ä –≤ —á–∞—Ç, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è –≤–∞—Å! \n\n"
            f"üí° <b>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>Bitcoin</code>, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∏–∫–µ—Ä <code>BTC</code></b>.\n\n"
            f"üëá <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>")}
    await message.answer(search_prompt_language_dict[language])
    

@router.message()
async def handle_crypto_request(message: Message):
    await crypto_requests.get_cached_list()
    language = db.get_language(message.chat.id)
    text_language_dict_429 = {
        'ua':  "–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ . –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ",
        'eng':  "Too many requests. Please try again later.",
        'ru': "–°–ª–∏—à–∫–æ –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ . –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
    }
    text_language_dict_404 = {
        'ua':  "–ù–∞–∂–∞–ª—å –º–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –∑–Ω–∞–π—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º . –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
        'eng':  "Unfortunately, we couldn't find a cryptocurrency with that name. Please try again.",
        'ru': "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º . –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
    }
    crypto_data = await crypto_requests.get_crypto_data(message.text)
    if crypto_data == 429:
        await message.answer(text_language_dict_429[language])


    elif crypto_data:
        data = bot_func.get_cache_text(crypto_data, language)
        text = data[0]
        crypto_name = data[1]
        img = await crypto_requests.get_crypto_chart(crypto_data.get('id'), language)
        if img != 429 and img is not None:
            img_bytes = img.getvalue()
            input_file = BufferedInputFile(img_bytes, filename="chart.png")
            await message.answer_photo(input_file, caption=text, reply_markup=builders.main_kb(language))
        else:
            await message.answer(text)
        logo_sticker = await bot_func.get_crypto_logo_sticker(crypto_data.get('image'))
        if logo_sticker:
            await message.answer_sticker(FSInputFile(logo_sticker))
            os.remove(logo_sticker)
        db.update_crypto_views(message.chat.id, crypto_name)
        
    else:
        crypto_list = await crypto_requests.get_cached_list()
        if crypto_list == 429:
            await message.answer(text_language_dict_429[language])
        elif crypto_list != None:
            crypto_coin = bot_func.find_crypto(crypto_list, message.text)

            if crypto_coin == None:
                await message.answer(text_language_dict_404[language])
            elif crypto_coin:
                not_list_crypto_data = await crypto_requests.get_cached_crypto(crypto_coin)
                if not_list_crypto_data == 429:
                    await message.answer(text_language_dict_429[language])
                elif not_list_crypto_data:
                    data = bot_func.get_text(not_list_crypto_data, language)
                    text = data[0]
                    crypto_name = data[1]
                    img = await crypto_requests.get_crypto_chart(not_list_crypto_data.get('id'), language)
                    if img != 429 and img is not None:
                        img_bytes = img.getvalue()
                        
                        input_file = BufferedInputFile(img_bytes, filename="chart.png")

                        await message.answer_photo(input_file, caption=text, reply_markup=builders.main_kb(language))
                    else:
                        await message.answer(text)
                    logo_sticker = await bot_func.get_crypto_logo_sticker(not_list_crypto_data.get("image").get("large"))
                    if logo_sticker:
                        await message.answer_sticker(FSInputFile(logo_sticker), reply_markup=builders.main_kb(language))
                        os.remove(logo_sticker)
                    db.update_crypto_views(message.chat.id, crypto_name)
                else:
                    await message.answer(text_language_dict_404[language])

