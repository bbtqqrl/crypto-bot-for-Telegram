from aiogram import Router, F
from aiogram.types import CallbackQuery
from data import crypto_requests
from keyboards import inline, builders
from datetime import datetime
from data.db import Database
db = Database()
router = Router()

@router.callback_query(lambda c: c.data.startswith("page_"))
async def handle_pagination(callback_query: CallbackQuery):
    try:
        _, current_page = callback_query.data.split("_")
        current_page = int(current_page)
        language = db.get_language(callback_query.message.chat.id)

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        cryptos = await crypto_requests.get_crypto_list(page=current_page, per_page=6)

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
        text = ''
        for crypto in cryptos:
            name = crypto.get("name")
            symbol = crypto.get("symbol")
            price = crypto.get("current_price")
            market_cap = crypto.get("market_cap")
            text_language_dict = {'ua': 'üìä –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è', 'ru': 'üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è', 'eng': 'üìä Capitalization'}
            text += f"<b>{name}</b> (<code>{symbol.upper()}</code>) - <b>{price}</b> USD\n{text_language_dict[language]}: {market_cap:,} USD\n\n"

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        pagination_buttons = inline.crypto_list_pagination(current_page, 41, language)  # 10 - –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (–º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏)

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        await callback_query.message.edit_text(text, reply_markup=pagination_buttons)

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback-–∑–∞–ø–∏—Ç—É
        await callback_query.answer()
    
    except Exception as e:
        print(e)
        await callback_query.answer("‚ùå Error processing request.")

@router.callback_query(F.data == 'fg_index')
async def fg_handler(callback_query: CallbackQuery):
    today = datetime.today()
    today = today.strftime("%Y-%m-%d")
    today = "-".join([char.lstrip('0') for char in today.split('-')])
    image = f"https://alternative.me/images/fng/crypto-fear-and-greed-index-{today}.png"
    text_language_dict = {'eng': f'<b>What is the Fear and Greed Index in Crypto?</b>\n\nSimilar to traditional markets, cryptocurrencies have their own unique Fear and Greed Index, commonly known as the Crypto Fear and Greed Index. This index gathers information from various online sources to get a good idea of public sentiment towards the crypto giant Bitcoin and other altcoins.\n\nThe Crypto Fear and Greed Index assesses several key factors. It analyzes the price fluctuations over the previous month plus the last three months, observes trading activity, and notes the pace of price changes. Additionally, it monitors social media platforms like Twitter and goes through hashtags related to different cryptocurrencies to get an idea of public consensus. The index also evaluates Bitcoin‚Äôs dominance among other cryptocurrencies and tracks online search volumes for Bitcoin. All these factors converge to provide a snapshot of how people perceive the crypto market at that time.',
                          'ua': f"<b>–©–æ —Ç–∞–∫–µ –Ü–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ —É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ñ?</b>\n\n–ü–æ–¥—ñ–±–Ω–æ –¥–æ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –º–∞—é—Ç—å —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ü–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ, —è–∫–∏–π –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–∑–∏–≤–∞—é—Ç—å Crypto Fear and Greed Index. –¶–µ–π —ñ–Ω–¥–µ–∫—Å –∑–±–∏—Ä–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä—ñ–∑–Ω–∏—Ö –æ–Ω–ª–∞–π–Ω-–¥–∂–µ—Ä–µ–ª, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –≥—Ä–æ–º–∞–¥—Å—å–∫—ñ –Ω–∞—Å—Ç—Ä–æ—ó —â–æ–¥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –≥—ñ–≥–∞–Ω—Ç–∞ Bitcoin —Ç–∞ —ñ–Ω—à–∏—Ö –∞–ª—å—Ç–∫–æ—ó–Ω—ñ–≤.\n\nCrypto Fear and Greed Index –æ—Ü—ñ–Ω—é—î –∫—ñ–ª—å–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤. –í—ñ–Ω –∞–Ω–∞–ª—ñ–∑—É—î –∫–æ–ª–∏–≤–∞–Ω–Ω—è —Ü—ñ–Ω –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å, –∞ —Ç–∞–∫–æ–∂ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∏ –º—ñ—Å—è—Ü—ñ, —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î –∑–∞ —Ç–æ—Ä–≥–æ–≤–æ—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É—î —Ç–µ–º–ø –∑–º—ñ–Ω–∏ —Ü—ñ–Ω. –ö—Ä—ñ–º —Ç–æ–≥–æ, –≤—ñ–Ω –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ, —Ç–∞–∫—ñ —è–∫ Twitter, –∞–Ω–∞–ª—ñ–∑—É—é—á–∏ —Ö–µ—à—Ç–µ–≥–∏, –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫–∞—Ä—Ç–∏–Ω—É —Å—É—Å–ø—ñ–ª—å–Ω–æ—ó –¥—É–º–∫–∏. –Ü–Ω–¥–µ–∫—Å —Ç–∞–∫–æ–∂ –æ—Ü—ñ–Ω—é—î –¥–æ–º—ñ–Ω—É–≤–∞–Ω–Ω—è Bitcoin —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É—î –æ–Ω–ª–∞–π–Ω-–ø–æ—à—É–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏, –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ Bitcoin. –£—Å—ñ —Ü—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ —Ä–∞–∑–æ–º –¥–∞—é—Ç—å –∑–∞–≥–∞–ª—å–Ω–µ —É—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —è–∫ –ª—é–¥–∏ —Å–ø—Ä–∏–π–º–∞—é—Ç—å —Ä–∏–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É —Ü–µ–π –º–æ–º–µ–Ω—Ç.",
                          'ru': f"<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ?</b>\n\n–ü–æ–¥–æ–±–Ω–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º —Ä—ã–Ω–∫–∞–º, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–º–µ—é—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞—é—Ç Crypto Fear and Greed Index. –≠—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–± –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º—É –≥–∏–≥–∞–Ω—Ç—É Bitcoin –∏ –¥—Ä—É–≥–∏–º –∞–ª—å—Ç–∫–æ–∏–Ω–∞–º.\n\nCrypto Fear and Greed Index –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –û–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü, –∞ —Ç–∞–∫–∂–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞, –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Twitter, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ö—ç—à—Ç–µ–≥–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–± –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –º–Ω–µ–Ω–∏–∏. –ò–Ω–¥–µ–∫—Å —Ç–∞–∫–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Bitcoin —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—ä–µ–º –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ Bitcoin. –í—Å–µ —ç—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–º–µ—Å—Ç–µ –¥–∞—é—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ –ª—é–¥–∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."}
    await callback_query.message.reply_photo(image, text_language_dict[db.get_language(callback_query.message.chat.id)])
    await callback_query.answer()


@router.callback_query(F.data == 'top_users')
async def top_users(callback_query: CallbackQuery):
    users = db.get_top_views()
    users = [[users[i][0], users[i][1]] if i < len(users) else [None, None] for i in range(5)]

    text_language_dict = {
        'eng' : (f'<b>Top bot users by viewing cryptocurrenciesüëÄ‚§µÔ∏è</b>\n\n'
            f'<b>ü•á ID : {users[0][0]} , Views : {users[0][1]}</b>\n'
            f'<b>ü•à ID : {users[1][0]} , Views : {users[1][1]}</b>\n'
            f'<b>ü•â ID : {users[2][0]} , Views : {users[2][1]}</b>\n'
            f'<b>4 ID : {users[3][0]} , Views : {users[3][1]}</b>\n'
            f'<b>5 ID : {users[4][0]} , Views : {users[4][1]}</b>\n\n'
            f'<b>Thanks for your activity! üíã</b>'),
        'ua' : (f'<b>–¢–æ–ø —é–∑–µ—Ä—ñ–≤ –±–æ—Ç–∞ –ø–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∫—Ä–∏–ø—Ç–∏üëÄ‚§µÔ∏è</b>\n\n'
            f'<b>ü•á ID : {users[0][0]} , –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ : {users[0][1]}</b>\n'
            f'<b>ü•à ID : {users[1][0]} , –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ : {users[1][1]}</b>\n'
            f'<b>ü•â ID : {users[2][0]} , –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ : {users[2][1]}</b>\n'
            f'<b>4 ID : {users[3][0]} , –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ : {users[3][1]}</b>\n'
            f'<b>5 ID : {users[4][0]} , –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ : {users[4][1]}</b>\n\n'
            f'<b>–î—è–∫—É—é –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å! üíã</b>'),
        'ru' : (f'<b>–¢–æ–ø —é–∑–µ—Ä–æ–≤ –±–æ—Ç–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—ÇüëÄ‚§µÔ∏è</b>\n\n'
            f'<b>ü•á ID : {users[0][0]} , –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ : {users[0][1]}</b>\n'
            f'<b>ü•à ID : {users[1][0]} , –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ : {users[1][1]}</b>\n'
            f'<b>ü•â ID : {users[2][0]} , –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ : {users[2][1]}</b>\n'
            f'<b>4 ID : {users[3][0]} , –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ : {users[3][1]}</b>\n'
            f'<b>5 ID : {users[4][0]} , –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ : {users[4][1]}</b>\n\n'
            f'<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üíã</b>')

    }
    users = db.get_top_views()
    await callback_query.message.answer(text_language_dict[db.get_language(callback_query.message.chat.id)])

@router.callback_query(F.data.in_(['ua', 'eng', 'ru']))
async def language_func(callback_query: CallbackQuery):
    text_language_dict = {'ua': '‚úÖ –°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä —É—Å–µ –ø—Ä–∞—Ü—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –ì–∞–π–¥–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞! üöÄ',
                          'eng': '‚úÖ Awesome! The bot is now in English. Let‚Äôs get started! üöÄ',
                          'ru': '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –í–ø–µ—Ä—ë–¥ –∫ –¥–µ–ª—É! üöÄ'}
    db.update_language(callback_query.message.chat.id, callback_query.data)
    await callback_query.message.delete()
    await callback_query.message.answer(text_language_dict[callback_query.data], reply_markup=builders.main_kb(callback_query.data))

@router.callback_query(F.data == 'change_language')
async def change_language(callback_query: CallbackQuery):
    text_language_dict = {'eng': f"Choose a new language üìö‚§µÔ∏è",
                          'ua': f"–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–≤—É üìö‚§µÔ∏è",
                          'ru': f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫ üìö‚§µÔ∏è"}
    await callback_query.message.answer(text_language_dict[db.get_language(callback_query.message.chat.id)], reply_markup=inline.language_button())
    await callback_query.answer()